Value Proposition: 
- Create a WebApp where you can create quizzes for yourself and generate endless questions

Author: Wyz Kim-Chan


Plan:
1. Implement logins
2. Create database:
a. Current Question Answer Bank needs to be imported and refactored.
   -Example Document:
   {
        User: [(topic), (question), (answer)]
   }
b. Temporary Question Answer Bank will be for the individual user.
c. We can also make quiz_settings in the database.
d. Summary: Each user will have their own database with THREE collections, a Question_Answer_Bank AND a Temporary_Question_Answer_Bank AND quiz_settings.
e. Initially, we will create just a COMMUNITY user, and implement the login later.
  - User can be "COMMUNITY" which has all questions that everyone can access. We will import the JSON using this.



Endgoal:
1. Topic Settings need to be local to a session or to a particular user.
2. New topics need to be added for a particular user only
3. Data has to be persistent
4. Later: Implement way to edit or remove questions.


Things to program:

0. Database to store questions and answers
1. Web Form to add questions and answers
2. Web form to edit questions and answers
3. User Accounts
4. Design/Templates
-----DONE on 17/1/2020-----
1. Web Form to add questions and answers
2. Design/Templates
-----DONE on 16/1/2020-----
1. Webform to set topics, number of questions and number of choices per question.


-----DONE on 15/1/2020-----

1. Webform that generates quiz questions
2. Webform that shows you your score and the questions-and-answers that you got right and wrong



-----DONE on 14/1/2020-----
Things I need to create a quiz app:

Programmatic Proof of Concept:

1. Question-Answer Bank
a. This should map questions to answers and topics
b. This should ideally separate questions by topics
c. This should be persistent data somewhere

2. Question Generator:
a. This should randomly generate a question from the Question-Answer Bank 
b. This should give you four choices from the answers in the Question-Answer Bank 
-- One of these answers will be the correct one according to the Question-Answer Bank 
-- The others will be random 
-- These will be randomly mapped to 'A', 'B', 'C' and 'D'
-- Each will be mapped as a tuple (A, [answer], right/wrong)

3. Quiz Generator: 
a. This will call the Question Generator and:
-- Ask you a question
-- Give you 4 choices 
-- Allow for answer input
-- Tell you if the answer is right or wrong
-- Tell you the correct answer.

 


End Product:
1. Web Form to add questions and answers
2. Web form to edit questions and answers
3. Different kinds of questions
4. A page that tells you what you got right and wrong
5. Score Count
6. User Accounts
7. Design


